---
- name: "Развёртывание УЦ и VPN-сервера"
  hosts: all
  become: yes
  gather_facts: no
  vars:
    ansible_become_method: sudo
    ansible_python_interpreter: /usr/bin/python3
    # Переменные для Easy-RSA
    ca_country: "{{ ca_country }}"
    ca_state: "{{ ca_state }}"
    ca_locality: "{{ ca_locality }}"
    ca_organization: "{{ ca_organization }}"
    ca_email: "{{ ca_email }}"
    ca_ou: "{{ ca_ou }}"
    ca_days: "{{ ca_days }}"
    cert_days: "{{ cert_days }}"

    # Для VPN
    openvpn_port: 1194
    openvpn_proto: udp
    vpn_clients: ['client1']
    center_host: "{{ groups['ca_servers'][0] }}"  # Первый сервер из группы CA


  tasks:
    - debug: msg="Тест подключения"
    # === 1. Базовая настройка ===
    - name: "Обновление системы"
      apt:
        update_cache: yes
        upgrade: dist

    - name: "Настройка UFW (разрешить основные порты)"
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 22
        - 80
        - 443

    - name: "Настройка UFW (разрешить VPN)"
      ufw:
        rule: allow
        port: "{{ openvpn_port }}"
        proto: "{{ openvpn_proto }}"

    - name: "Включение UFW"
      ufw:
        state: enabled

    # === 2. Настройка УЦ ===
    - name: "Установка OpenVPN (для генерации ключей)"
      apt:
        name: openvpn
        state: present
      when: "'ca_servers' in group_names"

    - name: "Установка Easy-RSA"
      apt:
        name: easy-rsa
        state: present
      when: "'ca_servers' in group_names"

    - name: "Копирование скрипта настройки PKI"
      copy:
        src: "files/setup_pki.sh"
        dest: "/tmp/setup_pki.sh"
        mode: 0755
      when: "'ca_servers' in group_names"

    - name: "Настройка PKI"
      shell: "/tmp/setup_pki.sh"
      environment:
        ca_country: "{{ ca_country }}"
        ca_state: "{{ ca_state }}"
        ca_locality: "{{ ca_locality }}"
        ca_organization: "{{ ca_organization }}"
        ca_email: "{{ ca_email }}"
        ca_ou: "{{ ca_ou }}"
        ca_days: "{{ ca_days }}"
        cert_days: "{{ cert_days }}"
      when: "'ca_servers' in group_names"

    - name: "Генерация tls-auth ключа"
      command: "openvpn --genkey --secret /etc/pki/easy-rsa/ta.key"
      args:
        creates: "/etc/pki/easy-rsa/ta.key"
      when: "'ca_servers' in group_names"

    # === 3. Генерация сертификатов ===
    - name: "Генерация сертификата VPN-сервера"
      shell: |
        set -e
        cd /etc/pki/easy-rsa || { echo "Directory not found"; exit 1; }
        [ -f easyrsa ] || { echo "easyrsa not found"; exit 1; }
        ./easyrsa build-server-full vpn-server nopass
      args:
        creates: "/etc/pki/easy-rsa/pki/issued/vpn-server.crt"
      when: "'ca_servers' in group_names"

    - name: "Генерация клиентских сертификатов"
      shell: |
        set -e
        cd /etc/pki/easy-rsa || { echo "Ошибка: директория /etc/pki/easy-rsa не найдена"; exit 1; }
        [ -f easyrsa ] || { echo "Ошибка: файл easyrsa не найден"; exit 1; }
        ./easyrsa build-client-full {{ item }} nopass || { echo "Ошибка генерации сертификата"; exit 1; }
      loop: "{{ vpn_clients }}"
      args:
        creates: "/etc/pki/easy-rsa/pki/issued/{{ item }}.crt"
      when: "'ca_servers' in group_names"

    # === 4. Подготовка файлов для VPN-сервера ===
    - name: "Установка OpenVPN"
      apt:
        name: openvpn
        state: present
      when: "'vpn_servers' in group_names"

    # === 4. Подготовка файлов для VPN-сервера ===

    - name: "Создание временной директории на контроллере для файлов CA"
      delegate_to: localhost
      run_once: true
      file:
        path: "files/tmp_pki/{{ center_host }}"
        state: directory
        mode: '0755'

    - name: "Скачивание файлов с CA сервера на контроллер"
      fetch:
        src: "/etc/pki/easy-rsa/{{ item.src }}"
        dest: "files/tmp_pki/{{ center_host }}/{{ item.dest }}"
        flat: yes
      loop:
        - { src: "pki/ca.crt", dest: "ca.crt" }
        - { src: "pki/issued/vpn-server.crt", dest: "vpn-server.crt" }
        - { src: "pki/private/vpn-server.key", dest: "vpn-server.key" }
        - { src: "ta.key", dest: "ta.key" }
      when: "'ca_servers' in group_names"
      delegate_to: "{{ center_host }}"

    - name: "Создание директории на VPN сервере для OpenVPN файлов"
      file:
        path: /etc/openvpn
        state: directory
        mode: '0755'
      when: "'vpn_servers' in group_names"

    - name: "Копирование файлов с контроллера на VPN сервер"
      copy:
        src: "files/tmp_pki/{{ center_host }}/{{ item }}"
        dest: "/etc/openvpn/{{ item }}"
        mode: "{{ '0600' if item.endswith('.key') else '0644' }}"
      loop:
        - ca.crt
        - vpn-server.crt
        - vpn-server.key
        - ta.key
      when: "'vpn_servers' in group_names"

    - name: "Настройка прав доступа"
      file:
        path: "/etc/openvpn/{{ item }}"
        owner: nobody
        group: nogroup
        mode: "{{ '0600' if item.endswith('.key') else '0644' }}"
      loop:
        - "ca.crt"
        - "vpn-server.crt"
        - "vpn-server.key"
        - "ta.key"
      when: "'vpn_servers' in group_names"

    - name: "Настройка iptables на VPN сервере"
      block:
        - name: "Установка iptables-persistent"
          apt:
            name: iptables-persistent
            state: present
          when: "'vpn_servers' in group_names"

        - name: "Добавление правила NAT"
          iptables:
            table: nat
            chain: POSTROUTING
            source: 10.8.0.0/24
            out_interface: "{{ ansible_default_ipv4.interface }}"
            jump: MASQUERADE
            action: append
          when: "'vpn_servers' in group_names"

        - name: "Включение IP forwarding"
          sysctl:
            name: net.ipv4.ip_forward
            value: 1
            state: present
            reload: yes
          when: "'vpn_servers' in group_names"

        - name: "Сохранение правил iptables"
          command: "netfilter-persistent save"
          when: "'vpn_servers' in group_names"
      when: "'vpn_servers' in group_names"

    # === 5. Настройка OpenVPN ===

    - name: "Настройка конфига сервера"
      template:
        src: "templates/server.conf.j2"
        dest: "/etc/openvpn/server/server.conf"
      when: "'vpn_servers' in group_names"
      notify: restart openvpn

    # === 6. Генерация клиентских конфигов ===
    - name: "Копирование скрипта генерации клиентских конфигов"
      copy:
        src: "files/generate_client_ovpn.sh"
        dest: "/usr/local/bin/generate_client_ovpn.sh"
        mode: "0755"
      when: "'ca_servers' in group_names"

    - name: "Генерация клиентских конфигов"
      shell: |
        generate_client_ovpn.sh "{{ item }}" "{{ ansible_host }}"
      loop: "{{ vpn_clients }}"
      environment:
        TA_KEY_PATH: "/etc/pki/easy-rsa/ta.key"
      when: "'ca_servers' in group_names"

    # === 7. Создание .deb пакета ===
    - name: "Подготовка структуры .deb пакета"
      block:
        - name: "Установка tree (для отладки)"
          apt:
            name: tree
            state: present
          when: "'ca_servers' in group_names"

        - name: "Создание директорий пакета"
          file:
            path: "/tmp/mypki/{{ item }}"
            state: directory
            mode: 0755
          loop:
            - "DEBIAN"
            - "etc/pki"
          when: "'ca_servers' in group_names"

        - name: "Копирование control-файла из шаблона"
          template:
            src: "templates/control.j2"
            dest: "/tmp/mypki/DEBIAN/control"
            mode: 0644
          when: "'ca_servers' in group_names"

        - name: "Копирование postrm скрипта"
          template:
            src: "templates/postrm.j2"
            dest: "/tmp/mypki/DEBIAN/postrm"
            mode: 0755
          when: "'ca_servers' in group_names"

        - name: "Копирование prerm скрипта"
          template:
            src: "templates/prerm.j2"
            dest: "/tmp/mypki/DEBIAN/prerm"
            mode: 0755
          when: "'ca_servers' in group_names"

        - name: "Копирование файлов PKI в пакет"
          copy:
            src: "/etc/pki/easy-rsa/{{ item.src }}"
            dest: "/tmp/mypki/etc/pki/{{ item.dest }}"
            remote_src: yes
            mode: "{{ item.mode | default('0644') }}"
          loop:
            - { src: "pki/ca.crt", dest: "ca.crt" }
            - { src: "vars", dest: "vars" }
            - { src: "ta.key", dest: "ta.key", mode: "0600" }
          when: "'ca_servers' in group_names"

        - name: "Проверка структуры пакета"
          shell: |
            tree /tmp/mypki
          register: pkg_structure
          changed_when: false
          when: "'ca_servers' in group_names"

        - debug:
            var: pkg_structure.stdout
          when: "'ca_servers' in group_names"

        - name: "Сборка .deb пакета"
          command: "dpkg-deb --build /tmp/mypki /tmp/mypki-config_1.0_all.deb"
          args:
            chdir: "/tmp"
            creates: "/tmp/mypki-config_1.0_all.deb"
          when: "'ca_servers' in group_names"

        - name: "Проверка собранного пакета"
          command: "dpkg-deb -c /tmp/mypki-config_1.0_all.deb"
          register: deb_contents
          changed_when: false
          when: "'ca_servers' in group_names"

        - debug:
            var: deb_contents.stdout
          when: "'ca_servers' in group_names"

  handlers:
    - name: "restart openvpn"
      service:
        name: openvpn-server@server
        state: restarted
      when: "'vpn_servers' in group_names"